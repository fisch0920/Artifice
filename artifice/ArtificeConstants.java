package artifice;

import java.awt.image.*;
import java.util.Hashtable;
import java.util.Vector;
import javax.swing.JPanel;

public class ArtificeConstants extends fisch.Utilities {
    public static final boolean FULL_SCREEN = false;
    
    public static int SIMULATION_WIDTH  = 640;//640 default
    public static int SIMULATION_HEIGHT = 480;//480 default
    
    public static int PARTICLE_ORIGIN_X = SIMULATION_WIDTH / 2;
    public static int PARTICLE_ORIGIN_Y = SIMULATION_HEIGHT / 2;
    
    public static void setSimulationDimensions(int width, int height) {
        ArtificeConstants.SIMULATION_WIDTH  = width;
        ArtificeConstants.SIMULATION_HEIGHT = height;
        
        ArtificeConstants.PARTICLE_ORIGIN_X = width / 2;
        ArtificeConstants.PARTICLE_ORIGIN_Y = height / 2;
    }
    
    public static final String IMAGE_PATH = "Images/";
    public static final String[] DISPLACED_DEFAULT_BACKGROUNDS = {
        IMAGE_PATH + "displaced.jpg",
        IMAGE_PATH + "vanish.jpg", 
        IMAGE_PATH + "cat.jpg", 
        IMAGE_PATH + "ice.jpg",
        IMAGE_PATH + "boardin.jpg", 
    };
    
    public static final float FUZZ = 0.25f, TWICE_FUZZ = FUZZ * 2;
    
    public static final int SPAWN_LINEAR = 0;
    public static final int SPAWN_RADIAL = 1;
    
    public static final int DEFAULT_GRAVITY_SPEED = 900;
    public static final int MAX_GRAVITY_SPEED     = 1000;
    public static final int DEFAULT_GRAVITY_NO_PARTICLES = 100;
    public static final int MAX_GRAVITY_NO_PARTICLES     = 300;
    
    public static final int DEFAULT_GROWTH = 5;
    public static final int MAX_GROWTH     = 8;
    
    public static final int MIN_CIRCLE_RADIUS     = 10;
    public static final int MAX_CIRCLE_RADIUS     = 70;
    public static final int DEFAULT_CIRCLE_RADIUS = 30;
    
    public static final float TENEBROUS_DEFAULT_SPEED = 1.33f;
    
    // Returns a Vector containing all of the unique RGB colors present in 
    // the given image
    public static final Vector<Integer> extractColorsFromImage(JPanel panel, String fileName) {
        BufferedImage image = gfx.ImageUtils.getBufferedImage(panel, fileName);
        
        if (image == null) {
            System.err.println("Error loading image + '" + fileName + '\'');
            return new Vector<Integer>();
        }
        
        int width  = image.getWidth();
        int height = image.getHeight();
        Hashtable<Integer, Boolean> colorsHash = new Hashtable<Integer, Boolean>();
        Vector<Integer> colors = new Vector<Integer>();
        
        int no = 0;
        for(int i = 0; i < width; i++) {
            for(int j = 0; j < height; j++) {
                int curColor = image.getRGB(i, j);
                
                if (!colorsHash.contains(curColor)) {
                    colors.add(curColor);
                    colorsHash.put(curColor, true);
                    
                    String s = ((curColor & 0x00FF0000) >> 16) + 
                            ", " + ((curColor & 0x0000FF00) >> 8) + 
                            ", " + (curColor & 0x000000FF) + ", ";
                    if (no++ > 3) {
                        System.out.println(s);
                        no = 0;
                    } else System.out.print(s);
                }
            }
        }
        
        return colors;
    }
    
    public static final int[] SUBSTRATE_COLORS = {
         0, 0, 0, 0, 16, 0, 104, 104,
            112, 104, 112, 120, 104, 88, 88, 112, 128, 128, 120, 120, 128, 128,
            88, 0, 144, 104, 72, 144, 80, 72, 144, 88, 24, 144, 96, 112, 152,
            104, 112, 152, 160, 184, 152, 48, 16, 152, 64, 8, 16, 0, 0, 16, 32,
            40, 160, 112, 120, 160, 120, 0, 160, 120, 72, 160, 128, 120, 160,
            144, 120, 160, 160, 168, 160, 56, 16, 160, 88, 16, 168, 144, 112,
            168, 152, 104, 168, 152, 72, 168, 160, 120, 168, 168, 128, 168,
            176, 160, 168, 40, 24, 176, 136, 104, 176, 144, 32, 176, 144, 48,
            176, 160, 152, 176, 168, 112, 176, 168, 144, 176, 176, 120, 176,
            176, 152, 176, 184, 176, 176, 192, 184, 184, 136, 104, 184, 184,
            168, 184, 184, 176, 192, 152, 136, 192, 160, 96, 192, 176, 120,
            192, 176, 144, 192, 192, 144, 192, 192, 176, 200, 160, 120, 200,
            176, 120, 200, 176, 96, 200, 184, 160, 200, 192, 152, 200, 200,
            184, 208, 176, 120, 208, 176, 128, 208, 176, 176, 208, 184, 144,
            208, 192, 160, 208, 192, 88, 208, 200, 160, 208, 200, 168, 208,
            200, 176, 208, 208, 192, 216, 192, 112, 216, 192, 136, 216, 192,
            160, 216, 192, 168, 216, 192, 176, 216, 200, 152, 216, 200, 160,
            216, 200, 176, 216, 208, 176, 224, 160, 96, 224, 176, 128, 224,
            184, 80, 224, 200, 160, 224, 200, 168, 224, 200, 88, 224, 208, 152,
            224, 208, 160, 224, 208, 176, 224, 216, 160, 224, 216, 176, 224,
            216, 184, 224, 224, 176, 224, 224, 184, 224, 224, 192, 232, 184,
            120, 232, 184, 40, 232, 192, 120, 232, 192, 136, 232, 200, 128,
            232, 200, 152, 232, 200, 72, 232, 208, 120, 232, 208, 80, 232, 216,
            168, 232, 216, 192, 232, 216, 200, 232, 224, 128, 232, 224, 152,
            232, 224, 176, 232, 224, 200, 232, 232, 216, 232, 240, 192, 232,
            240, 216, 232, 240, 224, 240, 200, 104, 240, 200, 152, 240, 208,
            152, 240, 216, 112, 240, 216, 144, 240, 216, 152, 240, 216, 192,
            240, 216, 208, 240, 224, 128, 240, 224, 176, 240, 224, 184, 240,
            224, 192, 240, 232, 160, 240, 232, 184, 240, 232, 192, 240, 232,
            200, 240, 232, 208, 240, 232, 216, 240, 240, 192, 240, 240, 200,
            240, 240, 208, 240, 240, 224, 240, 248, 168, 248, 184, 136, 248,
            184, 40, 248, 224, 112, 248, 224, 160, 248, 224, 168, 248, 224,
            176, 248, 224, 184, 248, 224, 192, 248, 224, 80, 248, 232, 120,
            248, 232, 184, 248, 232, 192, 248, 232, 208, 248, 232, 224, 248,
            240, 184, 248, 240, 200, 248, 240, 208, 248, 240, 216, 248, 248,
            208, 255, 152, 40, 255, 200, 40, 255, 208, 112, 255, 208, 184, 255,
            208, 40, 255, 216, 160, 255, 216, 168, 255, 216, 176, 255, 224,
            120, 255, 232, 104, 255, 232, 120, 255, 232, 144, 255, 232, 152,
            255, 232, 176, 255, 232, 184, 255, 232, 192, 255, 240, 152, 255,
            240, 160, 255, 240, 184, 255, 248, 176, 48, 32, 8, 56, 40, 16, 56,
            56, 40, 56, 64, 48, 72, 72, 88, 80, 16, 0, 80, 88, 96, 88, 104,
            104, 88, 104, 88, 88, 40, 0, 88, 80, 72, 88, 88, 56, 96, 112, 112,
            96, 56, 16, 
    };
    
    static final int[] ORBITAL_PALETTE = {
        0x3a242b, 0x3b2426, 0x352325, 0x836454, 
        0x7d5533, 0x8b7352, 0xb1a181, 0xa4632e, 
        0xbb6b33, 0xb47249, 0xca7239, 0xd29057, 
        0xe0b87e, 0xd9b166, 0xf5eabe, 0xfcfadf, 
        0xd9d1b0, 0xfcfadf, 0xd1d1ca, 0xa7b1ac, 
        0x879a8c, 0x9186ad, 0x776a8e, 0x000000, 
        // 0x000000, 0x000000, 0x000000, 0x000000,
        0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 
        // 0xFFFFFF, 0x000000, 0x000000, 0x000000,
        0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 
        0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 
    };
}
/*
 * Original (Includes too many light colors) 0, 0, 0, 0, 16, 0, 104, 104, 112,
 * 104, 112, 120, 104, 88, 88, 112, 128, 128, 120, 120, 128, 128, 88, 0, 144,
 * 104, 72, 144, 80, 72, 144, 88, 24, 144, 96, 112, 152, 104, 112, 152, 160,
 * 184, 152, 48, 16, 152, 64, 8, 16, 0, 0, 16, 32, 40, 160, 112, 120, 160, 120,
 * 0, 160, 120, 72, 160, 128, 120, 160, 144, 120, 160, 160, 168, 160, 56, 16,
 * 160, 88, 16, 168, 144, 112, 168, 152, 104, 168, 152, 72, 168, 160, 120, 168,
 * 168, 128, 168, 176, 160, 168, 40, 24, 176, 136, 104, 176, 144, 32, 176, 144,
 * 48, 176, 160, 152, 176, 168, 112, 176, 168, 144, 176, 176, 120, 176, 176,
 * 152, 176, 184, 176, 176, 192, 184, 184, 136, 104, 184, 184, 168, 184, 184,
 * 176, 192, 152, 136, 192, 160, 96, 192, 176, 120, 192, 176, 144, 192, 192,
 * 144, 192, 192, 176, 200, 160, 120, 200, 176, 120, 200, 176, 96, 200, 184,
 * 160, 200, 192, 152, 200, 200, 184, 208, 176, 120, 208, 176, 128, 208, 176,
 * 176, 208, 184, 144, 208, 192, 160, 208, 192, 88, 208, 200, 160, 208, 200,
 * 168, 208, 200, 176, 208, 208, 192, 216, 192, 112, 216, 192, 136, 216, 192,
 * 160, 216, 192, 168, 216, 192, 176, 216, 200, 152, 216, 200, 160, 216, 200,
 * 176, 216, 208, 176, 224, 160, 96, 224, 176, 128, 224, 184, 80, 224, 200, 160,
 * 224, 200, 168, 224, 200, 88, 224, 208, 152, 224, 208, 160, 224, 208, 176,
 * 224, 216, 160, 224, 216, 176, 224, 216, 184, 224, 224, 176, 224, 224, 184,
 * 224, 224, 192, 232, 184, 120, 232, 184, 40, 232, 192, 120, 232, 192, 136,
 * 232, 200, 128, 232, 200, 152, 232, 200, 72, 232, 208, 120, 232, 208, 80, 232,
 * 216, 168, 232, 216, 192, 232, 216, 200, 232, 224, 128, 232, 224, 152, 232,
 * 224, 176, 232, 224, 200, 232, 232, 216, 232, 240, 192, 232, 240, 216, 232,
 * 240, 224, 240, 200, 104, 240, 200, 152, 240, 208, 152, 240, 216, 112, 240,
 * 216, 144, 240, 216, 152, 240, 216, 192, 240, 216, 208, 240, 224, 128, 240,
 * 224, 176, 240, 224, 184, 240, 224, 192, 240, 232, 160, 240, 232, 184, 240,
 * 232, 192, 240, 232, 200, 240, 232, 208, 240, 232, 216, 240, 240, 192, 240,
 * 240, 200, 240, 240, 208, 240, 240, 224, 240, 248, 168, 248, 184, 136, 248,
 * 184, 40, 248, 224, 112, 248, 224, 160, 248, 224, 168, 248, 224, 176, 248,
 * 224, 184, 248, 224, 192, 248, 224, 216, 248, 224, 80, 248, 232, 120, 248,
 * 232, 184, 248, 232, 192, 248, 232, 208, 248, 232, 224, 248, 240, 184, 248,
 * 240, 200, 248, 240, 208, 248, 240, 216, 248, 248, 208, 255, 152, 40, 255,
 * 200, 40, 255, 208, 112, 255, 208, 184, 255, 208, 40, 255, 216, 160, 255, 216,
 * 168, 255, 216, 176, 255, 224, 120, 255, 232, 104, 255, 232, 120, 255, 232,
 * 144, 255, 232, 152, 255, 232, 176, 255, 232, 184, 255, 232, 192, 255, 232,
 * 200, 255, 232, 208, 255, 240, 152, 255, 240, 160, 255, 240, 184, 255, 240,
 * 192, 255, 240, 200, 255, 240, 208, 255, 240, 216, 255, 240, 232, 255, 248,
 * 176, 255, 248, 192, 255, 248, 200, 255, 248, 208, 48, 32, 8, 56, 40, 16, 56,
 * 56, 40, 56, 64, 48, 72, 72, 88, 80, 16, 0, 80, 88, 96, 88, 104, 104, 88, 104,
 * 88, 88, 40, 0, 88, 80, 72, 88, 88, 56, 96, 112, 112, 96, 56, 16,
 */